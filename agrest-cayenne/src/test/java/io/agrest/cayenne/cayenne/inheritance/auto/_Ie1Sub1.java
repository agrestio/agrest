package io.agrest.cayenne.cayenne.inheritance.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

import io.agrest.cayenne.cayenne.inheritance.Ie1Super;
import io.agrest.cayenne.cayenne.inheritance.Ie2;

/**
 * Class _Ie1Sub1 was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Ie1Sub1 extends Ie1Super {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "id";

    public static final StringProperty<String> A1 = PropertyFactory.createString("a1", String.class);
    public static final EntityProperty<Ie2> IE2 = PropertyFactory.createEntity("ie2", Ie2.class);

    protected String a1;

    protected Object ie2;

    public void setA1(String a1) {
        beforePropertyWrite("a1", this.a1, a1);
        this.a1 = a1;
    }

    public String getA1() {
        beforePropertyRead("a1");
        return this.a1;
    }

    public void setIe2(Ie2 ie2) {
        setToOneTarget("ie2", ie2, true);
    }

    public Ie2 getIe2() {
        return (Ie2)readProperty("ie2");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "a1":
                return this.a1;
            case "ie2":
                return this.ie2;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "a1":
                this.a1 = (String)val;
                break;
            case "ie2":
                this.ie2 = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.a1);
        out.writeObject(this.ie2);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.a1 = (String)in.readObject();
        this.ie2 = in.readObject();
    }

}
