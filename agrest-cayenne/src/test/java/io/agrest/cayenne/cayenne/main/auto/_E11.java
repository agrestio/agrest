package io.agrest.cayenne.cayenne.main.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.PersistentObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.SelfProperty;
import org.apache.cayenne.exp.property.StringProperty;

import io.agrest.cayenne.cayenne.main.E10;
import io.agrest.cayenne.cayenne.main.E11;

/**
 * Class _E11 was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _E11 extends PersistentObject {

    private static final long serialVersionUID = 1L;

    public static final SelfProperty<E11> SELF = PropertyFactory.createSelf(E11.class);

    public static final String ID_PK_COLUMN = "id";

    public static final StringProperty<String> ADDRESS = PropertyFactory.createString("address", String.class);
    public static final StringProperty<String> NAME = PropertyFactory.createString("name", String.class);
    public static final EntityProperty<E10> E10 = PropertyFactory.createEntity("e10", E10.class);

    protected String address;
    protected String name;

    protected Object e10;

    public void setAddress(String address) {
        beforePropertyWrite("address", this.address, address);
        this.address = address;
    }

    public String getAddress() {
        beforePropertyRead("address");
        return this.address;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setE10(E10 e10) {
        setToOneTarget("e10", e10, true);
    }

    public E10 getE10() {
        return (E10)readProperty("e10");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "address":
                return this.address;
            case "name":
                return this.name;
            case "e10":
                return this.e10;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "address":
                this.address = (String)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "e10":
                this.e10 = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.address);
        out.writeObject(this.name);
        out.writeObject(this.e10);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.address = (String)in.readObject();
        this.name = (String)in.readObject();
        this.e10 = in.readObject();
    }

}
