package io.agrest.cayenne.cayenne.main.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.PersistentObject;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.SelfProperty;
import org.apache.cayenne.exp.property.StringProperty;

import io.agrest.cayenne.cayenne.main.E6;

/**
 * Class _E6 was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _E6 extends PersistentObject {

    private static final long serialVersionUID = 1L;

    public static final SelfProperty<E6> SELF = PropertyFactory.createSelf(E6.class);

    public static final String CHAR_ID_PK_COLUMN = "char_id";

    public static final StringProperty<String> CHAR_COLUMN = PropertyFactory.createString("charColumn", String.class);

    protected String charColumn;


    public void setCharColumn(String charColumn) {
        beforePropertyWrite("charColumn", this.charColumn, charColumn);
        this.charColumn = charColumn;
    }

    public String getCharColumn() {
        beforePropertyRead("charColumn");
        return this.charColumn;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "charColumn":
                return this.charColumn;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "charColumn":
                this.charColumn = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.charColumn);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.charColumn = (String)in.readObject();
    }

}
