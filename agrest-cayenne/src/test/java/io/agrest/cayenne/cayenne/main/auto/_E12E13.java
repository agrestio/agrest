package io.agrest.cayenne.cayenne.main.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.PropertyFactory;

import io.agrest.cayenne.cayenne.main.E12;
import io.agrest.cayenne.cayenne.main.E13;

/**
 * Class _E12E13 was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class  _E12E13 extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String E12_ID_PK_COLUMN = "e12_id";
    public static final String E13_ID_PK_COLUMN = "e13_id";

    public static final EntityProperty<E12> E12 = PropertyFactory.createEntity("e12", E12.class);
    public static final EntityProperty<E13> E13 = PropertyFactory.createEntity("e13", E13.class);


    protected Object e12;
    protected Object e13;

    public void setE12(E12 e12) {
        setToOneTarget("e12", e12, true);
    }

    public E12 getE12() {
        return (E12)readProperty("e12");
    }

    public void setE13(E13 e13) {
        setToOneTarget("e13", e13, true);
    }

    public E13 getE13() {
        return (E13)readProperty("e13");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "e12":
                return this.e12;
            case "e13":
                return this.e13;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "e12":
                this.e12 = val;
                break;
            case "e13":
                this.e13 = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.e12);
        out.writeObject(this.e13);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.e12 = in.readObject();
        this.e13 = in.readObject();
    }

}
