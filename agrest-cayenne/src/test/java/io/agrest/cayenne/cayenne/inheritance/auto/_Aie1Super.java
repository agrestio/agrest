package io.agrest.cayenne.cayenne.inheritance.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

import io.agrest.cayenne.cayenne.inheritance.Ie3;

/**
 * Class _Aie1Super was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Aie1Super extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "id";

    public static final StringProperty<String> A0 = PropertyFactory.createString("a0", String.class);
    public static final NumericProperty<Integer> TYPE = PropertyFactory.createNumeric("type", Integer.class);
    public static final ListProperty<Ie3> IE3S = PropertyFactory.createList("ie3s", Ie3.class);

    protected String a0;
    protected int type;

    protected Object ie3s;

    public void setA0(String a0) {
        beforePropertyWrite("a0", this.a0, a0);
        this.a0 = a0;
    }

    public String getA0() {
        beforePropertyRead("a0");
        return this.a0;
    }

    public void setType(int type) {
        beforePropertyWrite("type", this.type, type);
        this.type = type;
    }

    public int getType() {
        beforePropertyRead("type");
        return this.type;
    }

    public void addToIe3s(Ie3 obj) {
        addToManyTarget("ie3s", obj, true);
    }

    public void removeFromIe3s(Ie3 obj) {
        removeToManyTarget("ie3s", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Ie3> getIe3s() {
        return (List<Ie3>)readProperty("ie3s");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "a0":
                return this.a0;
            case "type":
                return this.type;
            case "ie3s":
                return this.ie3s;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "a0":
                this.a0 = (String)val;
                break;
            case "type":
                this.type = val == null ? 0 : (int)val;
                break;
            case "ie3s":
                this.ie3s = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.a0);
        out.writeInt(this.type);
        out.writeObject(this.ie3s);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.a0 = (String)in.readObject();
        this.type = in.readInt();
        this.ie3s = in.readObject();
    }

}
