package io.agrest.cayenne.cayenne.inheritance.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.PropertyFactory;

import io.agrest.cayenne.cayenne.inheritance.Ie1Sub1;

/**
 * Class _Ie2 was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Ie2 extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "id";

    public static final ListProperty<Ie1Sub1> IE1S = PropertyFactory.createList("ie1s", Ie1Sub1.class);


    protected Object ie1s;

    public void addToIe1s(Ie1Sub1 obj) {
        addToManyTarget("ie1s", obj, true);
    }

    public void removeFromIe1s(Ie1Sub1 obj) {
        removeToManyTarget("ie1s", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Ie1Sub1> getIe1s() {
        return (List<Ie1Sub1>)readProperty("ie1s");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "ie1s":
                return this.ie1s;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "ie1s":
                this.ie1s = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.ie1s);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.ie1s = in.readObject();
    }

}
