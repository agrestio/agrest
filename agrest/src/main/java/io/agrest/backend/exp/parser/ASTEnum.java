/* Generated By:JJTree: Do not edit this line. ASTEnum.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package io.agrest.backend.exp.parser;


import java.util.Objects;

public class ASTEnum extends ASTScalar {

    public ASTEnum(int id) {
        super(id);
    }

    public void setEnumValue(String enumPath) throws ParseException {
        if (enumPath == null) {
            throw new ParseException("Null 'enumPath'");
        }

        int dot = enumPath.lastIndexOf('.');
        if (dot <= 0 || dot == enumPath.length() - 1) {
            throw new ParseException("Invalid enum path: " + enumPath);
        }

        String className = enumPath.substring(0, dot);
        String enumName = enumPath.substring(dot + 1);

        setValue(new ASTEnum.EnumValue(className, enumName));
    }

    static final class EnumValue {
        String className;
        String enumName;

        EnumValue(String className, String enumName) {
            this.className = Objects.requireNonNull(className);
            this.enumName = Objects.requireNonNull(enumName);
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || EnumValue.class != o.getClass()) return false;

            EnumValue enumValue = (EnumValue) o;
            return className.equals(enumValue.className) && enumName.equals(enumValue.enumName);
        }

        @Override
        public int hashCode() {
            int result = className.hashCode();
            result = 31 * result + enumName.hashCode();
            return result;
        }

        @Override
        public String toString() {
            return "enum:" + className + "." + enumName;
        }
    }
}
/* JavaCC - OriginalChecksum=c8ccffb962b40fa4cf19e2d922466988 (do not edit this line) */
