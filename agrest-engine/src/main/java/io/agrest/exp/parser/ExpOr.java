/* Generated By:JJTree: Do not edit this line. ExpOr.java Version 7.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=Exp,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package io.agrest.exp.parser;

import io.agrest.exp.AgExpression;
import io.agrest.protocol.Exp;

import java.util.Arrays;
import java.util.stream.Collectors;

public
class ExpOr extends ExpCondition {
  public ExpOr(int id) {
    super(id);
  }

  public ExpOr(AgExpressionParser p, int id) {
    super(p, id);
  }

  public ExpOr() {
    super(AgExpressionParserTreeConstants.JJTOR);
  }

  @Override
  public Exp or(Exp exp) {
    if (exp == null) {
      return this;
    }
    jjtAddChild((Node) exp, jjtGetNumChildren());
    return this;
  }

  /** Accept the visitor. **/
  public <T> T jjtAccept(AgExpressionParserVisitor<T> visitor, T data) {

    return
    visitor.visit(this, data);
  }

  @Override
  protected AgExpression shallowCopy() {
    return new ExpOr(id);
  }

  @Override
  public String toString() {
    return Arrays.stream(children).map(String::valueOf).collect(Collectors.joining(") or (", "(", ")"));
  }
}
/* JavaCC - OriginalChecksum=674a058bd6a706248aae7d6f4cb49ef6 (do not edit this line) */
